#include <bits/stdc++.h>
#define KHALED_WALEED_ATTIA ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
#define space " "
#define endl "\n"
#define ll long  long
void fileInput();
using namespace std;

const int dx[] = {0, 0, 1, -1, 1, -1, 1, -1},
        dy[] = {1, -1, 0, 0, 1, -1, -1, 1};
const ll mod = 100000007;
const int N = 1000009;
int memo[N];
int l;
using namespace std;
vector<ll>q_binary;
ll n;
void q_generate(ll i = 1){
    if(i > 1e6+1)
        return;
    q_binary.push_back(i);
    q_generate(i*10);
    q_generate(i*10+1);
}

int naruto(ll n){
    if(n<0)
        return 1e8;
    if(n == 0)
        return 0;
    int &ret = memo[n];
    if(~ret)
        return ret;
    ret = 1e6;

    for(ll i : q_binary){
        ret = min(ret,1+ naruto(n-i));
    }
    return ret;
}

void orichimaro(ll n){
    if(n<0)
        return;
    if(n == 0)
        return;
    int ret = memo[n];
    int ch1 = 1e6;
    for(ll i : q_binary){
        ch1 = min(ch1,1+ naruto(n-i));
        if(ret == ch1){
            cout<<i<<space;
            orichimaro(n-i);
            return;
        }
    }
}
int main() {
    KHALED_WALEED_ATTIA
    fileInput();
    cin >>n;
    q_generate(1);
//    cout<<q_binary.size()<<endl;
    memset(memo, -1, sizeof memo);
    sort(q_binary.rbegin(), q_binary.rend());
//    for(int i : q_binary)cout<<i<<endl;
        cout<<naruto(n)<<endl;
    orichimaro(n);
    return 0;
}

void fileInput(){
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}









/*
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@               @@@@   @@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@              @@@            @@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@   @@@@@@@@@@@@@@@@   @@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@   @@@@@@@@   @@@               @@@@          @@@          @@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
_________________________________________________________________________________________________________________
;;  ;;;;;;  ;;;;  ;;;;;;;;;;  ;;;;;;;;;;;    ;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;              ;;;             ;;;;;;;;
;;  ;;;;  ;;;;;;  ;;;;;;;;;;  ;;;;;;;;;;  ;;  ;;;;;;;;;;;;  ;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;   ;;;;;;;;;   ;;;;;;
;;  ;;  ;;;;;;;;  ;;;;;;;;;;  ;;;;;;;;;  ;;;;  ;;;;;;;;;;;  ;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;   ;;;;;;;;;;   ;;;;;
;;    ;;;;;;;;;;  ;;;;;;;;;;  ;;;;;;;;  ;;;;;;  ;;;;;;;;;;  ;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;   ;;;;;;;;;;   ;;;;;
;;  ;;;;;;;;;;;;              ;;;;;;;            ;;;;;;;;;  ;;;;;;;;;;;;;;;           ;;;;;;   ;;;;;;;;;;;   ;;;;
;;    ;;;;;;;;;;  ;;;;;;;;;;  ;;;;;;  ;;;;;;;;;;  ;;;;;;;;  ;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;   ;;;;;;;;;;;   ;;;;
;;  ;;  ;;;;;;;;  ;;;;;;;;;;  ;;;;;  ;;;;;;;;;;;;  ;;;;;;;  ;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;   ;;;;;;;;;;;   ;;;;
;;  ;;;;  ;;;;;;  ;;;;;;;;;;  ;;;;  ;;;;;;;;;;;;;;  ;;;;;;  ;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;   ;;;;;;;;;;;   ;;;;
;;  ;;;;;;  ;;;;  ;;;;;;;;;;  ;;;  ;;;;;;;;;;;;;;;;  ;;;;;  ;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;   ;;;;;;;;;;;  ;;;;;
;;  ;;;;;;;;  ;;  ;;;;;;;;;;  ;;  ;;;;;;;;;;;;;;;;;;  ;;;;             ;;;;              ;;;               ;;;;;;
-----------------------------------------------------------------------------------------------------------------
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



 */


